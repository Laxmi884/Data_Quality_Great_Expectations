# Welcome to Great Expectations! Always know what to expect from your data.
#
# Here you can define datasources, batch kwargs generators, integrations and
# more. This file is intended to be committed to your repo. For help with
# configuration please:
#   - Read our docs: https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/connect_to_data_overview/#2-configure-your-datasource
#   - Join our slack channel: http://greatexpectations.io/slack

# config_version refers to the syntactic version of this config file, and is used in maintaining backwards compatibility
# It is auto-generated and usually does not need to be changed.
config_version: 4.0

# This config file supports variable substitution which enables: 1) keeping
# secrets out of source control & 2) environment-based configuration changes
# such as staging vs prod.
#
# When GX encounters substitution syntax (like `my_key: ${my_value}` or
# `my_key: $my_value`) in the great_expectations.yml file, it will attempt
# to replace the value of `my_key` with the value from an environment
# variable `my_value` or a corresponding key read from this config file,
# which is defined through the `config_variables_file_path`.
# Environment variables take precedence over variables defined here.
#
# Substitution values defined here can be a simple (non-nested) value,
# nested value such as a dictionary, or an environment variable (i.e. ${ENV_VAR})
#
#
# https://docs.greatexpectations.io/docs/guides/setup/configuring_data_contexts/how_to_configure_credentials


config_variables_file_path: uncommitted/config_variables.yml

# The plugins_directory will be added to your python path for custom modules
# used to override and extend Great Expectations.
plugins_directory: plugins/

stores:
# Stores are configurable places to store things like Expectations, Validations
# Data Docs, and more. These are for advanced users only - most users can simply
# leave this section alone.
  expectations_store:
    class_name: ExpectationsStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: expectations/

  validation_results_store:
    class_name: ValidationResultsStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: uncommitted/validations/

  checkpoint_store:
    class_name: CheckpointStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      suppress_store_backend_id: true
      base_directory: checkpoints/

  validation_definition_store:
    class_name: ValidationDefinitionStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: validation_definitions/

expectations_store_name: expectations_store
validation_results_store_name: validation_results_store
checkpoint_store_name: checkpoint_store

data_docs_sites:
  # Data Docs make it simple to visualize data quality in your project. These
  # include Expectations, Validations & Profiles. The are built for all
  # Datasources from JSON artifacts in the local repo including validations &
  # profiles from the uncommitted directory. Read more at https://docs.greatexpectations.io/docs/terms/data_docs
  local_site:
    class_name: SiteBuilder
    show_how_to_buttons: true
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: uncommitted/data_docs/local_site/
    site_index_builder:
      class_name: DefaultSiteIndexBuilder
  local_site1:
    class_name: SiteBuilder
    show_how_to_buttons: true
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: uncommitted/data_docs/riskrnd/
    site_index_builder:
      class_name: DefaultSiteIndexBuilder
fluent_datasources:
  my_test_source:
    type: pandas
    id: 7074679f-6cee-4a27-8f40-d10656d68b6b
    assets:
      my_test_asset:
        type: dataframe
        id: a33ca6a1-0f9c-45b4-a7b3-09ce4149e791
        batch_metadata: {}
        batch_definitions:
          my_batch_definition:
            id: 4d4e1c7a-0f6d-475a-ac2c-0c2d1be809c5
            partitioner:
  risk_analytics:
    type: pandas
    id: b0b6397e-e369-46c8-8c1e-cac4ee370833
    assets:
      delq_history:
        type: dataframe
        id: 7ec1f637-3cb8-4762-b82f-cacc04d54c00
        batch_metadata: {}
        batch_definitions:
          delq_history_batch:
            id: 8a63d1e7-333a-41ed-811c-e0a568265ea4
            partitioner:
  my_test_class_source:
    type: pandas
    id: aa66dfc6-d3d8-461c-9686-3ca33696dc01
    assets:
      my_test_class_asset:
        type: dataframe
        id: 647f52da-c951-44d2-b1ec-c37183858ab4
        batch_metadata: {}
        batch_definitions:
          my_test_class_batch_definition:
            id: c305f04b-91b8-4487-813c-c87e2f02adca
            partitioner:
analytics_enabled: false
data_context_id: 67e7ab5c-1bb4-42de-b1c8-8418bcb00bd4
